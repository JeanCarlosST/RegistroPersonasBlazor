@page "/r_prestamos"

@inject IToastService toast

<EditForm Model="Prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="row d-flex justify-content-center">

        <div class="col-md-10 col-sm-11 col-11">

            <div class="card mt-1">

                <div class="card-header">
                    <h3>Registro de préstamos</h3>
                </div>

                <div class="card-body">
                    <form>
                        @*PrestamoID*@
                        <div class="input-group my-2">
                            <label class="input-group-text col-md-3 col-4">ID</label>
                            <InputNumber class="form-control" @bind-Value="Prestamo.PrestamoID" />
                            <button class="btn btn-warning" type="button" @onclick="Buscar">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                                </svg> Buscar
                            </button>
                        </div>

                        @*Fecha*@
                        <div class="input-group my-2">
                            <label class="input-group-text col-md-3 col-4">Fecha</label>
                            <InputDate class="form-control" @bind-Value="Prestamo.Fecha" />
                        </div>
                        <ValidationMessage For="@(()=> Prestamo.Fecha)" />

                        @*Persona*@
                        <div class="input-group my-2">
                            <label class="input-group-text col-md-3 col-4">Persona</label>
                            <InputSelect class="form-control" @bind-Value="Prestamo.PersonaID">
                                @foreach (var persona in Personas)
                                {
                                    <option value="@persona.PersonaID">@persona.Apellidos, @persona.Nombres</option>
                                }
                            </InputSelect>
                        </div>
                        <ValidationMessage For="@(()=> Prestamo.PersonaID)" />

                        @*Concepto*@
                        <div class="input-group my-2">
                            <label class="input-group-text col-md-3 col-4">Concepto</label>
                            <InputText class="form-control" @bind-Value="Prestamo.Concepto" />
                        </div>
                        <ValidationMessage For="@(()=> Prestamo.Concepto)" />

                        @*Monto*@
                        <div class="input-group my-2">
                            <label class="input-group-text col-md-3 col-4">Monto</label>
                            <InputNumber class="form-control" @bind-Value="Prestamo.Monto" />
                        </div>
                        <ValidationMessage For="@(()=> Prestamo.Monto)" />

                        @*Balance*@
                        <div class="input-group my-2">
                            <label class="input-group-text col-md-3 col-4">Balance</label>
                            <InputNumber class="form-control" @bind-Value="Prestamo.Balance" readonly />
                        </div>
                        <ValidationMessage For="@(()=> Prestamo.Balance)" />


                    </form>
                </div>

                <div class="card-footer">

                    @*Botones*@
                    <div class="container">

                        <div class="row justify-content-center">

                            <button class="col btn btn-primary mx-2 my-2" type="button" @onclick="Nuevo">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark" viewBox="0 0 16 16">
                                    <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z" />
                                </svg> Nuevo
                            </button>

                            <button class="col btn btn-success mx-2 my-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-check" viewBox="0 0 16 16">
                                    <path d="M10.854 6.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 8.793l2.646-2.647a.5.5 0 0 1 .708 0z" />
                                    <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z" />
                                </svg> Guardar
                            </button>

                            <button class="col btn btn-danger mx-2 my-2" type="button" @onclick="Eliminar">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark-x" viewBox="0 0 16 16">
                                    <path d="M6.854 7.146a.5.5 0 1 0-.708.708L7.293 9l-1.147 1.146a.5.5 0 0 0 .708.708L8 9.707l1.146 1.147a.5.5 0 0 0 .708-.708L8.707 9l1.147-1.146a.5.5 0 0 0-.708-.708L8 8.293 6.854 7.146z" />
                                    <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z" />
                                </svg> Eliminar
                            </button>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</EditForm>

@code {
    private Prestamos Prestamo = new Prestamos();
    public List<Personas> Personas { get; set; }

    protected override void OnInitialized()
    {
        Personas = PersonasBLL.GetList(p => true);
    }

    public void Nuevo()
    {
        Prestamo = new Prestamos();
    }

    private void Buscar()
    {
        var encontrado = PrestamosBLL.Buscar(Prestamo.PrestamoID);

        if (encontrado != null)
            this.Prestamo = encontrado;
        else
            toast.ShowWarning("Préstamo no encontrado");
    }

    public void Guardar()
    {
        bool guardado = PrestamosBLL.Guardar(Prestamo);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Prestamo guardado correctamente");
        }
        else
            toast.ShowError("No se pudo guardar el Préstamo");
    }

    public void Eliminar()
    {
        bool eliminado = PrestamosBLL.Eliminar(Prestamo.PrestamoID);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Préstamo eliminado correctamente");
        }
        else
            toast.ShowError("No se pudo eliminar el Préstamo");
    }
}
